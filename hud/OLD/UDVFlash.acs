// ACS
#library "UDVFlash"
#include "zcommon.acs"

global int 44:accbattery[];

function int map (int val, int min1, int max1, int min2, int max2)
{
	int ratio = FixedDiv(val - min1, max1 - min1);
	return FixedMul(ratio, max2 - min2) + min2;
}

function int abs (int x)
{
	if (x < 0) return -x;
	return x;
}

// Defines
#define MAXPLAYERS 8
int UDVflashlightOn[MAXPLAYERS];

Script "UDVToggleFlashlight" (void) NET
{
	if (UDVflashlightOn[PlayerNumber()]) 
	{
		ActivatorSound("UDVflashlight/click", 127);
		UDVflashlightOn[PlayerNumber()] = 0;
	}
	else if ( CheckInventory("UDV_AccBattery") > 0 || !GetCVAR("udv_lightpower") ) 
	{
		ActivatorSound("UDVflashlight/click", 127);
		UDVflashlightOn[PlayerNumber()] = 1;
	}
	else if ( GetUserCVAR(PlayerNumber(),"saehud_togglemessage") ) 
	{	
		Print(s:"Insufficient Power for Light");
		ActivatorSound("UDVflashlight/click", 127);
	}
	//else
		//UDVflashlightOn[PlayerNumber()] = 1;
	//ActivatorSound("UDVflashlight/click", 127);
}

Script "UDVFlashlightHandling" ENTER
{
	int lightcount;
	While(1)
	{
		While(GetActorProperty(0,APROP_Health)>0)
		{
			if (UDVflashlightOn[PlayerNumber()] && CheckInventory("UDV_Accbattery") > 0)
			{
				int ang = GetActorAngle(0);
				int pit = GetActorPitch(0)-0.006;
				int x = GetActorX(0);
				int y = GetActorY(0);
				int z = GetActorZ(0)+GetActorViewHeight(0);
				int flat = abs(cos(pit));
				SpawnForced("UDVFlashLightGlow",x,y,z);
				int j = 32;
				for (int i = 0; i < 48; i ++)
				{
					int x_pos = x+FixedMul(cos(ang),flat)*j;
					int y_pos = y+FixedMul(sin(ang),flat)*j;
					int z_pos = z-sin(pit)*j;
					if (i > 0 && (GetSectorFloorZ(0,x_pos >> 16,y_pos >> 16) > z_pos || GetSectorCeilingZ(0,x_pos >> 16,y_pos >> 16) < z_pos))
						break;
					int tidsy = UniqueTID();
					switch (i/2)
					{
					case 0:
						SpawnForced("UDVFlashLightBeam1",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 1:
						Spawn("UDVFlashLightBeam2",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 2:
						Spawn("UDVFlashLightBeam3",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 3:
						Spawn("UDVFlashLightBeam4",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 4:
						Spawn("UDVFlashLightBeam5",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 5:
						Spawn("UDVFlashLightBeam6",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 6:
						Spawn("UDVFlashLightBeam7",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 7:
						Spawn("UDVFlashLightBeam8",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 8:
						Spawn("UDVFlashLightBeam9",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 9:
						Spawn("UDVFlashLightBeam10",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 10:
						Spawn("UDVFlashLightBeam11",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 11:
						Spawn("UDVFlashLightBeam12",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 12:
						Spawn("UDVFlashLightBeam13",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 13:
						Spawn("UDVFlashLightBeam14",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 14:
						Spawn("UDVFlashLightBeam15",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 15:
						Spawn("UDVFlashLightBeam16",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 16:
						Spawn("UDVFlashLightBeam17",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 17:
						Spawn("UDVFlashLightBeam18",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 18:
						Spawn("UDVFlashLightBeam19",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 19:
						Spawn("UDVFlashLightBeam20",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 20:
						Spawn("UDVFlashLightBeam21",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 21:
						Spawn("UDVFlashLightBeam22",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					case 22:
						Spawn("UDVFlashLightBeam23",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
						break;
					default:
						Spawn("UDVFlashLightBeam24",x_pos,y_pos,z_pos,tidsy);
						NoiseAlert(0, 0);
					}
					j = j * 126 / 100;
				}
				lightcount = 0;
			}
			else if (UDVflashlightOn[PlayerNumber()] && CheckInventory("UDV_AccBattery") == 0 )//(UDVflashlightOn[PlayerNumber()] && CheckInventory("Armor") < GetUserCVAR(PlayerNumber(),"udv_lightpower") && GetUserCVAR(PlayerNumber(),"saehud_togglemessage") )
			{
				Until(lightcount > 0)
				{
					ACS_NamedExecuteAlways("UDVToggleFlashlight", 0);
					//If(GetUserCVAR(PlayerNumber(),"saehud_togglemessage")) Print(s:"Insufficient Power for Light");
					lightcount = 1;
				}
			}
			Delay(1);
		}
		Delay(1);
	}
}

Script "UDVFlashlightDrain" ENTER NET
{
	int batterycount = 0;
	While (1)
	{
			If (UDVflashlightOn[PlayerNumber()] && GetCVAR("udv_lightpower") )//&& CheckInventory("Armor") >= GetUserCVAR(PlayerNumber(),"udv_lightpower") )
			{
				If(batterycount <= 0)
				{
					accbattery[PlayerNumber()] = accbattery[PlayerNumber()] + 4;
					batterycount = 1;
				}
			}
			Else batterycount = 0;
			
			If(accbattery[PlayerNumber()] >= 4 && !UDVFlashlightOn[PlayerNumber()])
			{
				accbattery[PlayerNumber()] = accbattery[PlayerNumber()] - 4;
			}
			//Print(d:accbattery[PlayerNumber()]);
			Delay(1);
	}
}
