#library "saehud"
#import "Aspect.acs"
#include "zcommon.acs"

//global bool 43:camera_mode;
str UDV_Version = "1.85"; //Current UDV Version


// Constants -------------------------------------------------


#define SKILL_BDBLACKMETAL	   31 // BLACK METAL SKILL LEVEL FROM BRUTAL DOOM
#define SKILL_BDREAL		   32 // Realism Skill Level from Brutal Doom
#define SKILL_UDVBRUTAL        40 // UDV Skill Level from MAPINFO
#define SKILL_UDVHARDCORE	   41 // UDV Skill Level from MAPINFO
#define UDV_SpeedBlackMetal    1.3 // Black Metal Player Speed
#define UDV_SpeedNormal        1.0 // Normal Player Speed
#define UDV_SpeedReal          0.6 // Realism Player Speed
#define UDV_SpeedBarrel			0.4 // Speed While carrying Barrel

#define C_TID		1000	//Default camera tid


// ALL HEALTH IS IN PERCENT
#define D_HPEXTREME			200 // extreme health
#define D_HPABOVEHUNDRED	100 // If health > this number, the bar and counters will become blue
#define D_HPWARNING			51  // If health < this number, the bar and counters will become orange
#define D_HPCRITICAL		26  // If health < this number, the bar and counters will become red
#define D_HPZERO             0 	// 

// ALL ARMOR IS IN POINTS
#DEFINE D_ARMOREXTREME		200 // extreme armor level
#define D_ARMORABOVEHUNDRED	100 // If armor > this number, the bar and counters will become blue
#define D_ARMOR90       	90 	// armor damage level
#define D_ARMOR80       	80 	// armor damage level
#define D_ARMOR70       	70 	// armor damage level
#define D_ARMOR60       	60 	// armor damage level
#define D_ARMORLOW			50 	// If armor < this number, the bar and counters will become yellow
#DEFINE D_ARMOR40       	40 	// armor damage level
#define D_ARMOR30       	30 	// armor damage level
#define D_ARMORVERYLOW		25 	// If armor < this number, the bar and counters will become red
#DEFINE D_ARMOR20       	20 	// armor damage level
#define D_ARMOR10       	10 	// armor damage level
#define D_ARMORZERO      	0  	// armor damage level


// Functions -------------------------------------------------

function int min (int a, int b)
{
	if (a < b) return a;
	return b;
}

function VOID DisplayBulletHoles (void) //preload the bulletholes on entering game
{
	{
	SETFONT("PBULA1");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULB1");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULC1");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULD1");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULE1");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULF1");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULA2");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULB2");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULC2");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULD2");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULE2");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULF2");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULA3");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULB3");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULC3");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULD3");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULE3");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
	{
	SETFONT("PBULF3");
	HudMessage(s:"A"; HUDMSG_ALPHA, 0, 0, 0.1, 0.8, 0.1, 0);
	}
}

script 428 (void) NET
{
	int sae_savetime = (GetUserCvar(0, "saehud_savetime") * 2100); // convert minutes to relative tics

			Autosave();
			Delay(sae_savetime);
			ACS_Terminate(429,0);
}

script 429 (void) NET
{
int sae_savetimeCTR = GetUserCvar(0, "saehud_savetime");
int t;
t = 0;
			while( TRUE )
			{
			int savetime_ar = GetAspectRatio();
			SetHudSize(730,560,1);
			SETFONT("UDVSMALL");
			If ( !CheckInventory("sae_extcam") && !CheckInventory("sae_deathcam") )
			{
				If(savetime_ar == ASPECT_4_3)
				{
					If ( CheckInventory("UDValt") )
					{
						HudMessage(d:(sae_savetimeCTR-1)-(t/60), s:":", d:5-((t%60)/10), d:9-(t%10);
						HUDMSG_PLAIN | HUDMSG_COLORSTRING | HUDMSG_ALPHA | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP, 355, "SaeHUDGr", 198.0, 534.0, 1.0, 0.25);
					}
					Else
					{
						HudMessage(d:(sae_savetimeCTR-1)-(t/60), s:":", d:5-((t%60)/10), d:9-(t%10);
						HUDMSG_PLAIN | HUDMSG_COLORSTRING | HUDMSG_ALPHA | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP, 355, "SaeHUDGr", 68.0, 492.0, 1.0, 0.25);
					}
				}
				Else
				{
					If ( CheckInventory("UDVAlt") )
					{
						HudMessage(d:(sae_savetimeCTR-1)-(t/60), s:":", d:5-((t%60)/10), d:9-(t%10);
						HUDMSG_PLAIN | HUDMSG_COLORSTRING | HUDMSG_ALPHA | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP, 355, "SaeHUDGr", 143.0, 537.0, 1.0, 0.25);
					}
					Else
					{
						HudMessage(d:(sae_savetimeCTR-1)-(t/60), s:":", d:5-((t%60)/10), d:9-(t%10);
						HUDMSG_PLAIN | HUDMSG_COLORSTRING | HUDMSG_ALPHA | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP, 355, "SaeHUDGr", -30.0, 495.0, 1.0, 0.25);
					}
				}
			}
				//HUDMSG_PLAIN | HUDMSG_COLORSTRING | HUDMSG_ALPHA | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP, 1, "SaeHUDGr", -0.92, 0.99, 2.0, 0.25);
				Delay (35);
				t++;
			}
}

// Scripts ---------------------------------------------------

global int 49:givestartarmor;

Script 472 (void)
{
	If(GetCvar("saehud_togglemessage"))
	{
		//SetHudSize(730,560,1);
		//SETFONT("DIGIFONT_LARGE");
		SetHudSize(320,200,1);
		SETFONT("DIGIFONT_SMALL");
		HudMessage(s:"UAC DEFENSIVE VISOR VERSION ", s:UDV_Version, s:" ONLINE"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 356, "SaeHUDGr", 160.0, 22.0, 2.0, 0.05, 0.25);
		delay(35*2);
		HudMessage(s:"UAC IDENTITY '", n:0, s:"' VERIFIED"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 357, "SaeHUDGr", 160.0, 25.0, 2.7, 0.05, 0.25);
		delay(35);
		HudMessage(s:"VITAL SIGNS MONITOR ACTIVE"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 358, "SaeHUDGr", 160.0, 28.0, 2.0, 0.05, 0.25);
		delay(52);
		HudMessage(s:"AMMUNITION MONITOR ACTIVE"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 359, "SaeHUDGr", 160.0, 31.0, 1.5, 0.05, 0.25);
		delay(52);
		If(GetCVar("saehud_toggleammo")) HudMessage(s:"RESERVE AMMUNITION VIEW ENABLED"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 360, "SaeHUDGr", 160.0, 34.0, 1.5, 0.05, 0.25);
		Else HudMessage(s:"RESERVE AMMUNITION VIEW OFF"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 360, "SaeHUDGr", 160.0, 34.0, 1.5, 0.05, 0.25);
		delay(52);
		If(GetCvar("saehud_togglelist")) HudMessage(s:"WEAPON LIST ENABLED"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 361, "SaeHUDGr", 160.0, 37.0, 1.5, 0.05, 0.25);
		Else HudMessage(s:"WEAPON LIST OFF"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 361, "SaeHUDGr", 160.0, 37.0, 1.5, 0.05, 0.25);
		delay(35);
		If(GetCVar("udv_sounds") > 0 ) HudMessage(s:"VOICE ALERTS ENABLED"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 362, "SaeHUDGr", 160.0, 40.0, 1.5, 0.05, 0.25);
		Else HudMessage(s:"VOICE ALERTS OFF"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 362, "SaeHUDGr", 160.0, 40.0, 1.5, 0.05, 0.25);
		delay(35);
		If(GetCVar("UDV_RadarEnabled")) HudMessage(s:"MOVEMENT SCANNER FUNCTIONAL"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 363, "SaeHUDGr", 160.0, 43.0, 1.0, 0.05, 0.25);
		Else HudMessage(s:"MOVEMENT SCANNER UNAVAILABLE"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 363, "SaeHUDGr", 160.0, 43.0, 1.0, 0.05, 0.25);
		//delay(17);
		//HudMessage(s:"RADAR SYSTEM FUNCTIONAL"; HUDMSG_TYPEON | HUDMSG_LOG | HUDMSG_ALPHA | HUDMSG_COLORSTRING , 360, "SaeHUDGr", 365.0, 84.0, 2.0, 0.05, 0.25);
	}
}

Script 12 Enter
{
	if (GameType () != GAME_TITLE_MAP)
	{
		ACS_Execute(1129,0); //Fog Script
		ACS_Execute(1131,0); //Ambient Music script
	    ACS_Execute(470, 0);
		ACS_Execute(475, 0);
		ACS_Execute(472, 0);
		ACS_Execute(18755,0); //Face Script
		ACS_Execute(4278,0); //Screen Shake on Damage
		
		int damcount = 0; //counter to avoid damage audio at start
		int hcount = 1; //counter for health warning
		int hcount2 = 1; //counter for flatline
		int armcount = 1; //counter for armor warning
		int asavecount = 1; //counter for autosave voice
		int acount = 1; //counter for low ammo
		int acount2 = 1; //counter for empty ammo
		int acount3 = 1; //counter for clip ammo

		If ( !GetUserCVAR(PlayerNumber(), "saehud_startarmor") )
		{
			givestartarmor++;
		}
		
		If (GiveStartArmor == 0)
		{
			GiveInventory("ArmorBonus", 80);
			givestartarmor++;
		}

		DisplayBulletHoles();  //call function to preload bulletholes in visor on level start to avoid slowdown
		
		SETFONT("UDVSMALL");
		
		int maxhealth = GetActorProperty(0, APROP_SpawnHealth);
		if (maxhealth == 0) maxhealth = 100;
	  While(TRUE)
	  {
		int maxhealthstam = maxhealth + GetActorProperty(0, APROP_Stamina); //starting max health + stamina
		
		// Store player's current health and armor in their respective variables
		int sae_health = 100 * GetActorProperty(0, APROP_Health) / maxhealthstam; //health percentage
		int sae_actualhealth = GetActorProperty(0, APROP_Health); //Actual Health number
		int sae_armor = CheckInventory("Armor");
		If(sae_armor >= 1 && damcount < 1)
			{
				GiveInventory("sae_armordamage", 1);
				damcount++;
			}
		// The given items in the following code are needed by SBARINFO to display the appropriate
		// bars colors and counters for health, armor and ammo.
		
		// Health -------------------------------------------------------------
		If( sae_actualhealth <= D_HPZERO ) GiveInventory("sae_Flatline", 1);
		Else If(sae_health < D_HPCRITICAL && sae_actualhealth > D_HPZERO) GiveInventory("sae_HealthCritical", 1);
		Else If(sae_health >= D_HPCRITICAL && sae_health < D_HPWARNING)	GiveInventory("sae_HealthWarning", 1);
		Else If(sae_health >= D_HPWARNING && sae_health <= D_HPABOVEHUNDRED) GiveInventory("sae_HealthGood", 1);
		Else If(sae_health > D_HPABOVEHUNDRED && sae_health <= D_HPEXTREME) GiveInventory("sae_HealthAboveHundred", 1);
		Else GiveInventory("sae_HealthExtreme", 1);
		
		// Armor --------------------------------------------------------------
		If(sae_armor <= D_ARMORZERO) GiveInventory("sae_ArmorZero", 1);
		Else If(sae_armor > D_ARMORZERO && sae_armor <= D_ARMOR10) GiveInventory("sae_Armor10", 1);
		Else If(sae_armor > D_ARMOR10 && sae_armor <= D_ARMOR20) GiveInventory("sae_Armor20", 1);
		Else If(sae_armor > D_ARMOR20 && sae_armor <= D_ARMORVERYLOW) GiveInventory("sae_ArmorVeryLow", 1);
		Else If(sae_armor > D_ARMORVERYLOW && sae_armor <= D_ARMOR30) GiveInventory("sae_Armor40", 1);
		Else If(sae_armor > D_ARMOR30 && sae_armor <= D_ARMORLOW) GiveInventory("sae_ArmorLow", 1);
		Else If(sae_armor > D_ARMORLOW && sae_armor <= D_ARMOR60) GiveInventory("sae_Armor60", 1);
		Else If(sae_armor > D_ARMOR60 && sae_armor <= D_ARMOR80) GiveInventory("sae_Armor80", 1);
		Else If(sae_armor > D_ARMOR80 && sae_armor <= D_ARMORABOVEHUNDRED) GiveInventory("sae_ArmorOk", 1);
		Else If(sae_armor > D_ARMORABOVEHUNDRED && sae_armor <= D_ARMOREXTREME) GiveInventory("sae_ArmorAboveHundred", 1);
		Else GiveInventory("sae_ArmorExtreme", 1);
		
		// Air supply display -------------------------------------------------

		If(GetActorProperty(0, APROP_WaterLevel) == 3) GiveInventory("sae_Underwater", 1);
		Else TakeInventory("sae_UnderWater", 1);
		
		// Armor Damage Toggle
		
		If(GetCVar("saehud_toggledamage")) GiveInventory("sae_ToggleDamage", 1);
		Else TakeInventory("sae_ToggleDamage", 1);
		
		// Level stats toggle -----------------------

		If(GetCVar("saehud_togglestats")) GiveInventory("sae_ToggleStats", 1);
		Else TakeInventory("sae_ToggleStats", 1);
		
		// Mugshot display toggle
		
		If(GetCVar("saehud_togglemug")) GiveInventory("sae_ToggleMug", 1);
		Else TakeInventory("sae_ToggleMug", 1);
		
		// Dynamic Mugshot toggle
		
		If(GetCVar("saehud_dynamicmug")) GiveInventory("sae_DynamicMug", 1);
		Else TakeInventory("sae_DynamicMug", 1);

		// Low Quality Toggle (not yet implemented)
		
		If(GetCVAR("udv_toggleLQ")) GiveInventory("udv_LQ", 1);
		Else TakeInventory("udv_LQ", 1);
		
		// Player Name Toggle
		
		If(GetCVAR("udv_togglename")) GiveInventory("udv_playername", 1);
		Else TakeInventory("udv_playername", 1);
		
		// Level Time Toggle
		
		If(GetCVAR("udv_toggletime")) GiveInventory("udv_leveltime", 1);
		Else TakeInventory("udv_leveltime", 1);
		
		// Automap Visor Display Toggle
		
		If(GetCVAR("udv_toggleAMvisor")) GiveInventory("udv_AMvisor", 1);
		Else TakeInventory("udv_AMvisor", 1);
		
		/*
		// Mugshot aspect view
		
		int sae_ar = GetAspectRatio();
		
		If(sae_ar == ASPECT_4_3) GiveInventory("sae_Mug43", 1);
		Else If(sae_ar == ASPECT_5_4) GiveInventory("sae_Mug43", 1);
		Else TakeInventory("sae_Mug43", 1);
		*/
		
		// Visor Inventory toggle
		
		If(GetCVar("saehud_toggleinv")) GiveInventory("sae_ToggleInv", 1);
		Else TakeInventory("sae_ToggleInv", 1);

		// Reserve Ammo toggle
		
		If(GetCVar("saehud_toggleammo")) GiveInventory("sae_Toggleammo", 1);
		Else TakeInventory("sae_Toggleammo", 1);
		
		// Armor Warning
		
		//If( CheckInventory("sae_ArmorZero") && CheckInventory("sae_armordamage"))
		If( sae_armor <= D_ARMORZERO )
		{
		Until ( armcount > 1 )
			{
				If(GetCVar("udv_sounds") > 0 )
					{
						If (GetCVar("udv_sounds") == 1)
						{
						LocalAmbientSound("armorem", 127);
						}
						Else If(GetCVar("udv_sounds") == 2)
						{
						LocalAmbientSound("fvox/armorem", 127);
						}
						Else If(GetCVar("udv_sounds") == 3)
						{
						LocalAmbientSound("gdos/armorem", 127);
						}
						Else If(GetCVar("udv_sounds") == 4)
						{
						LocalAmbientSound("Graham/ArmorEmpty", 127);
						}
						Else If(GetCVar("udv_sounds") == 5)
						{
						LocalAmbientSound("Omega/ArmorEmpty", 127);
						}
					}
				If(GetCvar("saehud_togglemessage"))
					{
						print(s:"\cgWarning -- Armor Compromised");
					}
						armcount++;
			}
		}
		ELSE
		{
			armcount = 1;
		}
		
		// Health Warning
		
		//If(CheckInventory("sae_HealthCritical"))
		If( sae_health < D_HPCRITICAL && sae_actualhealth > D_HPZERO ) 
		{
		Until ( hcount > 1 )
			{
				If(GetCVar("udv_sounds") > 0 )
					{
						If (GetCVar("udv_sounds") == 1)
						{
						LocalAmbientSound("healthlo", 127);
						}
						Else If(GetCVar("udv_sounds") == 2)
						{
						LocalAmbientSound("fvox/healthlo", 127);
						}
						Else If(GetCVar("udv_sounds") == 3)
						{
						LocalAmbientSound("gdos/healthlo", 127);
						}
						Else If(GetCVar("udv_sounds") == 4)
						{
						LocalAmbientSound("Graham/HealthLow", 127);
						}
						Else If(GetCVar("udv_sounds") == 5)
						{
						LocalAmbientSound("Omega/HealthLow", 127);
						}
					}
				If(GetCvar("saehud_togglemessage"))
					{
						print(s:"\cgWarning -- Vital Signs Critical");
					}
				hcount++;
			}
		}
		ELSE
		{
			hcount = 1;
		}

		If( sae_actualhealth <= D_HPZERO )
		{
		Until ( hcount2 > 1 )
			{
				If(GetCVar("udv_sounds") > 0 )
					{
						If (GetCVar("udv_sounds") == 1)
						{
						LocalAmbientSound("death", 127);
						}
						Else If(GetCVar("udv_sounds") == 2)
						{
						LocalAmbientSound("fvox/death", 127);
						}
						Else If(GetCVar("udv_sounds") == 3)
						{
						LocalAmbientSound("gdos/death", 127);
						}
						Else If(GetCVar("udv_sounds") == 4)
						{
						LocalAmbientSound("Graham/death", 127);
						}
						Else If(GetCVar("udv_sounds") == 5)
						{
						LocalAmbientSound("Omega/death", 127);
						}
						LocalAmbientSound("flatline", 127);
					}
				hcount2++;
			}
		}
		ELSE
		{
			hcount2 = 1;
		}
		
		If( CheckInventory("sae_PrimaryAmmoRed") && (CheckInventory("sae_melee") == FALSE) && !CheckInventory("sae_PrimaryAmmoEmpty") )
		{
		Until ( acount > 1 )
			{
				//If(GetCVar("udv_sounds") > 0 )
				//{
					If(GetCVar("udv_sounds") == 1)
					{
					LocalAmbientSound("ammolo", 127);
					}
					Else If(GetCVar("udv_sounds") == 2)
					{
					LocalAmbientSound("fvox/ammolo", 127);
					}
					Else If(GetCVar("udv_sounds") == 3)
					{
					LocalAmbientSound("gdos/ammolo", 127);
					}
						Else If(GetCVar("udv_sounds") == 4)
						{
						LocalAmbientSound("Graham/AmmoLow", 127);
						}
						Else If(GetCVar("udv_sounds") == 5)
						{
						LocalAmbientSound("Omega/AmmoLow", 127);
						}
				//}
				If(GetCvar("saehud_togglemessage"))
				{
					print(s:"\cgWarning -- Ammunition Critical");
				}
					acount++;
			}
		}
		ELSE
		{
			acount = 1;
		}
		
		If( CheckInventory("sae_PrimaryAmmoEmpty") && (CheckInventory("sae_melee") == FALSE) )
		{
		Until ( acount2 > 1 )
			{
				//If(GetCVar("udv_sounds") > 0 )
				//{
					If(GetCVar("udv_sounds") == 1)
					{
					LocalAmbientSound("ammoem", 127);
					}
					Else If(GetCVar("udv_sounds") == 2)
					{
					LocalAmbientSound("fvox/ammoem", 127);
					}
					Else If(GetCVar("udv_sounds") == 3)
					{
					LocalAmbientSound("gdos/ammoem", 127);
					}
						Else If(GetCVar("udv_sounds") == 4)
						{
						LocalAmbientSound("Graham/AmmoEmpty", 127);
						}
						Else If(GetCVar("udv_sounds") == 5)
						{
						LocalAmbientSound("Omega/AmmoEmpty", 127);
						}

				//}
				If(GetCvar("saehud_togglemessage"))
				{
					print(s:"\cgWarning -- Ammunition Depleted");
				}
					acount2++;
			}
		}
		ELSE
		{
			acount2 = 1;
		}
		If( CheckInventory("sae_SecondaryAmmoRed") && CheckInventory("sae_secondary") && CheckInventory("UDV_SecAmmoCap") )
		{
		Until ( acount3 > 1 )
			{
				If(GetCVar("udv_sounds") > 0 )
				{
					LocalAmbientSound("clipwarn", 127);
				}
				acount3++;
			}
		}
		ELSE
		{
			acount3 = 1;
		}

		// Autosave Script

		
		IF( GetUserCvar(0, "saehud_autosave") && GetActorProperty(0, APROP_Health > 0) )
			{
				GiveInventory("sae_recording", 1);
				ACS_Execute(428, 0, 0, 0, 0);
				ACS_Execute(429, 0, 0, 0, 0);
				Until ( asavecount > 1 )
				{
				If(GetCVar("udv_sounds") > 0 )
					{
						If(GetCVar("udv_sounds") == 1)
						{
						LocalAmbientSound("CRECINIT", 127);
						}
						Else If(GetCVar("udv_sounds") == 2)
						{
						LocalAmbientSound("fvox/CRECINIT", 127);
						}
						Else If(GetCVar("udv_sounds") == 3)
						{
						LocalAmbientSound("gdos/CRECINIT", 127);
						}
						Else If(GetCVar("udv_sounds") == 4)
						{
						LocalAmbientSound("Graham/RecorderOn", 127);
						}
						Else If(GetCVar("udv_sounds") == 5)
						{
						LocalAmbientSound("Omega/RecorderOn", 127);
						}
					}
				If(GetCvar("saehud_togglemessage"))
					{
						print(s:"\cgCombat Recorder Initialized");
					}
						asavecount++;
				}
			}
		Else
		{
			TakeInventory("sae_recording", 1);
			ACS_Terminate(428, 0);
			ACS_Terminate(429, 0);
			Until ( asavecount < 2 )
			{
				If(GetCVar("udv_sounds") > 0  && GetActorProperty(0, APROP_Health > 0) )
					{
						If( GetCVar("udv_sounds") == 1)
						{
						LocalAmbientSound("CRECDISA", 127);
						}
						Else If(GetCVar("udv_sounds") == 2)
						{
						LocalAmbientSound("fvox/CRECDISA", 127);
						}
						Else If(GetCVar("udv_sounds") == 3)
						{
						LocalAmbientSound("gdos/CRECDISA", 127);
						}
						Else If(GetCVar("udv_sounds") == 4)
						{
						LocalAmbientSound("Graham/RecorderOff", 127);
						}
						Else If(GetCVar("udv_sounds") == 5)
						{
						LocalAmbientSound("Graham/RecorderOff", 127);
						}
					}
				If(GetCvar("saehud_togglemessage"))
				{
					print(s:"\cgCombat Recorder Disabled");
				}
					asavecount = 1;
			}
		}
		
		//Check for external cam usage (death, rolls, stealth kills, etc.)
		
		If( ThingCountName("ChaseCam2", C_TID+PlayerNumber()))
		{
			GiveInventory("sae_extcam", 1);
		}
		Else
		{
			TakeInventory("sae_extcam", 1);
		}
		
		Delay(1);
	  }
  }
}

script 1131 (void)
{
		If ( GetUserCVAR(0, "udv_ambient") )
		{
			LocalSetMusic("UDV_AMB");
			While(true)
			{
			Delay(random(35*30,35*240));
			LocalAmbientSound("ambient", Random(85,127));
			}
		}
		Else
		{
			LocalSetMusic("*");
		}
}

script 471 RESPAWN
{
TakeInventory("sae_extcam", 1);
TakeInventory("sae_deathcam", 1);
}

script 475 (void)
{
    if (GameSkill () > SKILL_UDVBRUTAL || GetUserCVAR(0, "UDV_ToggleBleeding") )
	{
	int healthcnt;//= 0;
		While(true)
		{
			int udv_health = GetActorProperty(0, APROP_Health);
			If( udv_health >= 180 )
			{
					hudMessage(s:"ENERGIZED";
					HUDMSG_PLAIN, 153, CR_CYAN, 0.04, 0.87, 0, 0.10);
				If ( GameSkill() < SKILL_BDREAL && Gameskill() != SKILL_BDBLACKMETAL )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedNormal + 0.3);
				}
				Else If ( GameSkill() == SKILL_BDBLACKMETAL )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedBlackMetal + 0.3);
				}
				Else If ( GameSkill() == SKILL_BDREAL && CheckInventory("HasBarrel") || GameSkill() >= SKILL_UDVBRUTAL && CheckInventory("HasBarrel") )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedBarrel);
				}
				Else
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedReal + 0.3);
				}
				healthcnt = 0;
				//Delay(1);
			}
			Else If ( udv_health < 180 && udv_health > 20 )
			{
				HudMessage(s:" ";
				HUDMSG_PLAIN, 153, CR_RED, 0.04, 0.87, 0, 0.10);
				If ( GameSkill() < SKILL_BDREAL && Gameskill() != SKILL_BDBLACKMETAL )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedNormal);
				}
				Else If ( GameSkill() == SKILL_BDBLACKMETAL )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedBlackMetal);
				}
				Else If ( GameSkill() == SKILL_BDREAL && CheckInventory("HasBarrel") || GameSkill() >= SKILL_UDVBRUTAL && CheckInventory("HasBarrel") )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedBarrel);
				}
				Else
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedReal);
				}
				healthcnt = 0;
				//Delay(1);
			}
			Else If( udv_health <= 20 && udv_health > 0 )
			{
					HudMessage(s:"FATIGUED";
					HUDMSG_PLAIN, 153, CR_RED, 0.04, 0.87, 0, 0.10);
				If ( GameSkill() < SKILL_BDREAL && Gameskill() != SKILL_BDBLACKMETAL )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedNormal - 0.3);
				}
				Else If ( GameSkill() == SKILL_BDBLACKMETAL )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedBlackMetal - 0.3);
				}
				Else If ( GameSkill() == SKILL_BDREAL && CheckInventory("HasBarrel") || GameSkill() >= SKILL_UDVBRUTAL && CheckInventory("HasBarrel") )
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedBarrel);
				}
				Else
				{
				SetActorProperty (0, APROP_Speed, UDV_SpeedReal - 0.3);
				}
				If(healthcnt == 0)
				{
				Delay(random(35*5,35*15));
				healthcnt = 1;
				Restart;
				}
				HudMessage(s:"Blood Loss Detected";
				HUDMSG_FADEINOUT, 156, CR_RED, 1.5, 0.6, 0.5,
				2.0, 2.0);				
				DamageThing(1);
				healthcnt = 1;
				Delay(random(35*5,35*15));
			}
			Else
			{
				HudMessage(s:" ";
				HUDMSG_PLAIN, 153, CR_RED, 0.04, 0.87, 0, 0.10);
			}
			Delay(1);
		}
	}
	Else
	{
	While (true)
		{
			HudMessage(s:" ";
			HUDMSG_PLAIN, 153, CR_RED, 0.04, 0.87, 0, 0.10);
			If ( GameSkill() < SKILL_BDREAL && Gameskill() != SKILL_BDBLACKMETAL )
			{
			SetActorProperty (0, APROP_Speed, UDV_SpeedNormal);
			}
			Else If ( GameSkill() == SKILL_BDBLACKMETAL )
			{
			SetActorProperty (0, APROP_Speed, UDV_SpeedBlackMetal);
			}
			Else If ( GameSkill() == SKILL_BDREAL && CheckInventory("HasBarrel") || GameSkill() >= SKILL_UDVBRUTAL && CheckInventory("HasBarrel") )
			{
			SetActorProperty (0, APROP_Speed, UDV_SpeedBarrel);
			}
			Else
			{
			SetActorProperty (0, APROP_Speed, UDV_SpeedReal);
			}
			Delay(1);
		}
	}
}

script 474 (void) net
{
   // if (GameSkill () > SKILL_UDVBRUTAL )
	//{
		If (CheckInventory("Armor") >= GetUserCVAR(0, "UDV_EMSArmor") && GetActorProperty(0, APROP_Health) <= GetUserCVAR(0, "UDV_EMSHealth") )
		{
			HudMessage(s:"Activating EMS";
				HUDMSG_FADEINOUT, 156, CR_ORANGE, 1.5, 0.6, 0.5,
				2.0, 2.0);				
			//HealThing(40, random(21, 40));
			TakeInventory("Armor", 40);
			ActivatorSound("INJECT", 127);
			For(int i = 0; i<random(21,40); i++)
			{
			HealThing(1, 100);
			Delay(7);
			}
			//GiveInventory("HealthBonus", 20);
			SetActorProperty (0, APROP_Speed, 0.6);
		}
		Else If (CheckInventory("Armor") >= GetUserCVAR(0, "UDV_EMSArmor") && GetActorProperty(0, APROP_Health) > GetUserCVAR(0, "UDV_EMSHealth") )
		{
			HudMessage(s:"No Emergency";
			HUDMSG_FADEINOUT, 156, CR_ORANGE, 1.5, 0.6, 0.5,
			2.0, 2.0);				
			ActivatorSound("GenAlert", 127);
		}
		Else If ( CheckInventory("Armor") < GetUserCVAR(0, "UDV_EMSArmor") )
		{
			HudMessage(s:"Insufficient Power for EMS";
			HUDMSG_FADEINOUT, 156, CR_ORANGE, 1.5, 0.6, 0.5,
			2.0, 2.0);				
			ActivatorSound("GenAlert", 127);
		}
	//}
}


script 469 (void) net
{
ACS_Terminate(12, 0);
ACS_Terminate(470, 0);
ACS_Terminate(475, 0);
ACS_Terminate(18755, 0);
ACS_Terminate(4278, 0);
ACS_Terminate(1131, 0);
Delay(17);
ACS_Execute(12, 0); // Main HUD Script
ACS_Execute(470,0); // Realistic Aim Script
ACS_Execute(475,0); // Bleeding Script
ACS_Execute(18755,0); //Face Script
ACS_Execute(4278,0); //Screen Shake on Damage
ACS_Execute(32759,0); // Dark Doom Script
ACS_Execute(471,0); // Remove ExtCam and DeathCam
ACS_Execute(1129,0); //Fog Script
ACS_Execute(1131,0); //Ambient Music Script
}

Script 4278 (void) net
{
	int ArmorAbsorb;
	if ( GameSkill () >= SKILL_UDVBRUTAL || GetUserCVAR(0, "UDV_ToggleShake") )
	{
		While(true)
		{
			If(CheckInventory("Armor") >= 80) ArmorAbsorb = 0.25;
			Else If(CheckInventory("Armor") < 80 && CheckInventory("Armor") >= 50) ArmorAbsorb = 0.50;
			Else If(CheckInventory("Armor") < 50 && CheckInventory("Armor") >= 20) ArmorAbsorb = 0.75;
			Else ArmorAbsorb = 1.0;
			Int PrevHealth = GetActorProperty(0, APROP_Health);
			Delay(1);
			Int HealthDamage = PrevHealth - GetActorProperty(0, APROP_Health);
			If( HealthDamage > 1 && HealthDamage <= 5 ) QuakeEX(0,5,5,5,FixedMul(17,ArmorAbsorb),0,1,"NULL",QF_SCALEDOWN);
			Else If( HealthDamage > 5 && HealthDamage <= 10 ) QuakeEX(0,5,5,5,FixedMul(35,ArmorAbsorb),0,1,"NULL",QF_SCALEDOWN);
			Else If( HealthDamage > 10 && HealthDamage <= 20 ) QuakeEX(0,7,7,7,FixedMul(35,ArmorAbsorb),0,1,"NULL",QF_SCALEDOWN);
			Else If( HealthDamage > 20 ) QuakeEX(0,10,10,10,FixedMul(52,ArmorAbsorb),0,1,"NULL",QF_SCALEDOWN);
		}
	}
}

script 470 (void) net
{
    if ( GameSkill () >= SKILL_UDVBRUTAL ) SetActorProperty (0, APROP_Speed, 0.6); //slower movement
	if ( GameSkill () >= SKILL_UDVBRUTAL || GetUserCVAR(0, "UDV_toggleRealAim") )
	{
		int true_angle = GetActorAngle(0);
		int true_pitch = GetActorPitch(0);
		int angle;
		int pitch;
		int dx = 0;
		int dy = 0;
		while(true)
		{
			angle = GetActorAngle(0);
			pitch = GetActorPitch(0);
			delay(1);
			int new_angle = GetActorAngle(0);
			int new_pitch = GetActorPitch(0);
			true_angle += new_angle - angle;
			true_pitch += new_pitch - pitch;
			while (true_angle > 1.0) true_angle -= 1.0;
			while (true_angle < 0.0) true_angle += 1.0;
			if (true_pitch > 0.25) true_pitch = 0.25;
			if (true_pitch < -0.25) true_pitch = -0.25;
			int dx2;
			if (angle < new_angle)
			{
				if (abs(new_angle - angle) < abs(new_angle - (angle + 1.0)))
					dx2 = new_angle - angle;
				else
					dx2 = new_angle - (angle + 1.0);
			}
			else
			{
				if (abs(new_angle - angle) < abs(new_angle - angle + 1.0))
					dx2 = new_angle - angle;
				else
					dx2 = new_angle - angle + 1.0;
			}
			int vel = abs(GetActorVelX(0)) + abs(GetActorVelY(0)) + abs(GetActorVelZ(0));
			vel = FixedMul(vel, 0.001);
			dx = FixedMul(dx + dx2, min(0.875 + vel, 0.99));
			dy = FixedMul(dy + (new_pitch - pitch), min(0.825 + vel, 0.99));
			int loopy = FixedMul((Timer() << 16), 0.01);
			int loopy2 = FixedMul((Timer() << 16), 0.02);
			int mx = FixedMul(sin(loopy), 0.00024 + vel + abs(dx)/15);
			int my = FixedMul(sin(loopy2), 0.00048 + vel + abs(dy)/15);/*
			mx = FixedMul(dx*50, mx + vel*4);
			my = FixedMul(dy*50, my + vel*4);
			if (mx < -0.9) mx = -0.9;
			if (mx > 0.9) mx = 0.9;
			if (my < -0.24) my = -0.24;
			if (my > 0.24) my = 0.25;*/
			dx += mx;
			dy += my;
			if (new_angle < true_angle)
			{
				if (abs(true_angle - new_angle) < abs(true_angle - (new_angle + 1.0)))
					angle = ((new_angle + dx/15) + true_angle)/2;
				else
					angle = ((new_angle + dx/15) + (true_angle - 1.0))/2;
			}
			else
			{
				if (abs(true_angle - new_angle) < abs(true_angle - new_angle + 1.0))
					angle = ((new_angle + dx/15) + true_angle)/2;
				else
					angle = ((new_angle + dx/15) + (true_angle + 1.0))/2;
			}
			pitch = ((new_pitch + dy/15) + true_pitch*2)/3;
			while (angle > 1.0) angle -= 1.0;
			while (angle < 0.0) angle += 1.0;
			if (pitch > 0.25) pitch = 0.25;
			if (pitch < -0.25) pitch = -0.25;
			ChangeActorAngle(0, angle, true);
			ChangeActorPitch(0, pitch, true);
		}
	}
	else
		delay (1);
}